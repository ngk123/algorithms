#include<stdio.h>
#include<stdlib.h>

int read()
{
	char c = 0;
int input = 0;
while(c < 33)
c = getchar_unlocked();
while(c > 33)
{
input = input*10+c-'0';
c = getchar_unlocked();
}
return input;
}


typedef struct comp
{
  int st;
  int end;
  int compno;
  int flag;
}comp;




int cmpfunc (const void * e, const void * f)
{
  if((*(comp*)e).compno==(*(comp*)f).compno)
    {
      return (  (*(comp*)e).end- (*(comp*)f).end );
    }
}

int main()
{
  int T,N,K,l,m,o,ans,i,j,temp,maxend;
  comp og[100006],process[100006];
  //  scanf("%d",&T);
  T=read();
  while(T--)
    {
//    scanf("%d%d",&N,&K);
      N=read();
      K=read();
      for(i=0;i<N;i++)
	{

	  og[i].st=read();og[i].end=read();og[i].compno=read();
	  og[i].flag=1;
	}
      qsort(og,N,sizeof(comp),cmpfunc);
      /*     ans=0;
      temp=0;
      for(i=1;i<=K;i++)
	{
	  l=0;
	  for(j=temp;j<N;j++)
	    {
	      if(og[j].compno==i)
		{
		  process[l].st=og[j].st;
		  process[l].end=og[j].end;
		  process[l].compno=i;
		  process[l].flag=1;
		  l++;
		}
	      else 
		break;
	    }
	  temp=j;
	  qsort(process,l,sizeof(comp),cmpfunc);
	  // printf(  "l=%d\n",l);
	  m=0;


*/
	  /* while(1)
	    {
	      if(m==l)break;
              if(process[m].flag==1)
		{
		  ans+=1;
		  for(o=0;o<l;o++)
		    {
		      if(process[m].end>process[o].st)
			process[o].flag=-1;
		    }
		}
	      process[m].flag=-1;
	      m++;
	    }*/
      /*	  maxend=-1;
	  for(m=0; m<l;m++)
	    {
	      if(process[m].st>=maxend){ans+=1;maxend=process[m].end;}

	    }
*/
	  for(i=0;i<N;i++)
	    {
	      printf("%d %d %d \n", og[i].st,og[i].end,og[i].compno);

	    }

	  // printf("anstemp:%d\n",ans);
	}
      printf("%d\n",ans);
    }
  
  return 0;
}
